private bool IsSurrounded(chess[,] board, int x, int y, Color enemyColor, bool[,] visited, List<(int, int)> region)
		{
			// Các hướng mặc định bao gồm cả 4 hướng ngang dọc và 4 hướng chéo
			int[,] directions = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 },  // ngang dọc
                          { 1, 1 }, { 1, -1 }, { -1, -1 }, { -1, 1 } }; // chéo

			// Quy tắc di chuyển đặc biệt cho các điểm cụ thể
			if (x == 0 && y == 1) // Điểm (0, 1)
			{
				directions = new int[,] { { 0, 1 }, { 1, 0 } }; // Chỉ đi ngang và đi xuống
			}
			else if (x == 0 && y == 3) // Điểm (0, 3)
			{
				directions = new int[,] { { 0, -1 }, { 1, 0 } }; // Chỉ đi ngang và đi xuống
			}
			else if (x == 1 && y == 0) // Điểm (1, 0)
			{
				directions = new int[,] { { 1, 0 }, { 0, 1 } }; // Đi dọc và sang phải
			}
			else if (x == 3 && y == 0) // Điểm (3, 0)
			{
				directions = new int[,] { { -1, 0 }, { 0, 1 } }; // Đi dọc và sang phải
			}
			else if (x == 1 && y == 4) // Điểm (1, 4)
			{
				directions = new int[,] { { 1, 0 }, { 0, -1 } }; // Đi dọc và sang trái
			}
			else if (x == 3 && y == 4) // Điểm (3, 4)
			{
				directions = new int[,] { { -1, 0 }, { 0, -1 } }; // Đi dọc và sang trái
			}
			else if (x == 4 && y == 1) // Điểm (4, 1)
			{
				directions = new int[,] { { 0, 1 }, { -1, 0 } }; // Đi ngang và đi lên
			}
			else if (x == 4 && y == 3) // Điểm (4, 3)
			{
				directions = new int[,] { { 0, -1 }, { -1, 0 } }; // Đi ngang và đi lên
			}

			Queue<(int, int)> queue = new Queue<(int, int)>();
			queue.Enqueue((x, y));
			region.Add((x, y));
			visited[x, y] = true;
			bool surrounded = true;

			while (queue.Count > 0)
			{
				var (cx, cy) = queue.Dequeue();

				for (int i = 0; i < directions.GetLength(0); i++)
				{
					int nx = cx + directions[i, 0];
					int ny = cy + directions[i, 1];

					// Kiểm tra biên để tránh vượt quá phạm vi bàn cờ
					if (nx < 0 || nx > 4 || ny < 0 || ny > 4)
					{
						continue; // Không kiểm tra ngoài phạm vi bàn cờ
					}

					// Nếu có ô trống cạnh quân cờ đối thủ, có thể di chuyển, quân cờ không bị vây
					if (board[nx, ny] == null)
					{
						surrounded = false; // Có lối thoát, không bị bao vây
					}

					// Nếu là quân đối thủ chưa kiểm tra, thêm vào danh sách
					if (!visited[nx, ny] && board[nx, ny] != null && board[nx, ny].Color == enemyColor)
					{
						visited[nx, ny] = true;
						queue.Enqueue((nx, ny));
						region.Add((nx, ny));
					}
				}
			}

			return surrounded;
		}

